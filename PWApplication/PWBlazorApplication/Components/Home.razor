@page "/"

@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Components.Routing;
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Components.Web
@using PWApplication.BLL.Enums;
@using PWApplication.BLL.Services;
@using PWApplication.Domain.Models;
@using PWBlazorApplication.Enums;
@using PWBlazorApplication.Models;
@inject NavigationManager _navigation;
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IAccountService _accountService;
@inject ITransactionService _transactionService;


<style>
    a {
        color: #00897B;
    }

    a.active {
        color: #004D40;
        font-weight: 700;
    }
</style>

<CascadingAuthenticationState>
    <AuthorizeView>  
        <Authorized>
            <div class="container">
                <p>@model.Name</p>
                <p>PW balance: @model.Balance</p>
                <div class="form-group">
                    <a class="btn btn-primary" @onclick="CreateTransaction">Create transaction</a>
                </div>
                <table class="table">
                    <thead>
                        <tr>
                            <th>
                                <span class="@(GetSortStyle(ColumnType.Date))"></span>
                                <span class="sort-link" onclick="@(() => SortTable(model.CurrentSort == SortState.DateAsc ? SortState.DateDesc : SortState.DateAsc))">Date</span>
                            </th>
                            <th>
                                <span class="@(GetSortStyle(ColumnType.CorrespondentName))"></span>
                                <span class="sort-link" onclick="@(() => SortTable(model.CurrentSort == SortState.CorrespondentNameAsc ? SortState.CorrespondentNameDesc : SortState.CorrespondentNameAsc))">Correspondent name</span>
                            </th>
                            <th>
                                <span class="@(GetSortStyle(ColumnType.Amount))"></span>
                                <span class="sort-link" onclick="@(() => SortTable(model.CurrentSort == SortState.AmountAsc ? SortState.AmountDesc : SortState.AmountAsc))">Amount</span>
                            </th>
                            <th>Balance</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                    @foreach (var transaction in @model.Transactions)
                    {
                        <tr>
                            <td>@transaction.Date</td>
                            <td>@transaction.Correspondent.UserName</td>
                            <td>@transaction.Amount</td>
                            <td>@transaction.UserBalance</td>
                            <td>
                                @if (transaction.Type == PWApplication.Domain.Models.TransactionType.Debit)
                                {
                                    <a href="createTransaction?id=@transaction.Id">Repeat</a>
                                }
                            </td>
                        </tr>
                    }
                    </tbody>
                 </table>
                <button type="button" class="btn btn-primary" @onclick="Logout">Logout</button>
            </div>        
        </Authorized>  
    <NotAuthorized>
            <div class="container">
            <p>Please signed in.</p>
            <NavLink href="login">Login</NavLink> |
            <NavLink href="register">Registration</NavLink>
        </div>
    </NotAuthorized>  
</AuthorizeView>  
</CascadingAuthenticationState>
 

@code {
    private HomeModel model = new HomeModel();
    private User user;

    protected async override Task OnInitializedAsync()
    {
        var state = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var stateUser = state.User;
        if (stateUser == null)
        {
            return;
        }

        user = _accountService.GetUser(stateUser.Identity.Name);
        if(user == null)
        {
            return;
        }

        model.Name = user.UserName;
        model.Balance = user.Balance;
        model.CurrentSort = SortState.DateDesc;
        model.Transactions = _transactionService.GetTransactions(user.UserName, null, null, null, null, null, model.CurrentSort);
    }

    private void Logout(){
        _navigation.NavigateTo($"/logout", true);
    }

    private void CreateTransaction(){
        _navigation.NavigateTo($"/createTransaction", true);
    }

    private void SortTable(SortState newSortState)
    {
        model.CurrentSort = newSortState;
        model.Transactions = _transactionService.GetTransactions(user.UserName, null, null, null, null, null, model.CurrentSort);
    }

    private string GetSortStyle(ColumnType columnType)
    {
        switch (columnType)
        {
            case ColumnType.Date:
                if (model.CurrentSort == SortState.DateAsc)
                {
                    return "glyphicon glyphicon-chevron-up";
                }
                if (model.CurrentSort == SortState.DateDesc)
                {
                    return "glyphicon glyphicon-chevron-down";
                }
                break;
            case ColumnType.CorrespondentName:
                if (model.CurrentSort == SortState.CorrespondentNameAsc)
                {
                    return "glyphicon glyphicon-chevron-up";
                }
                if (model.CurrentSort == SortState.CorrespondentNameDesc)
                {
                    return "glyphicon glyphicon-chevron-down";
                }
                break;
            case ColumnType.Amount:
                if (model.CurrentSort == SortState.AmountAsc)
                {
                    return "glyphicon glyphicon-chevron-up";
                }
                if (model.CurrentSort == SortState.AmountDesc)
                {
                    return "glyphicon glyphicon-chevron-down";
                }
                break;
        }

        return "";
    }
}
