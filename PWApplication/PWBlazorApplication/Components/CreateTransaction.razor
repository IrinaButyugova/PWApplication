@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Components.Forms;
@using PWBlazorApplication.Models;
@using PWApplication.BLL.Services;

@inject IAccountService _accountService;
@inject ITransactionService _transactionService;
@inject ITransferService _transferService;
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigation;

<EditForm EditContext="editContext" OnSubmit="ValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <InputRow>
        <InputComponent Title="Recipient Name">
            <InputSelect class="form-select" name="RecipientName" @bind-Value="createModel.RecipientName">
                @foreach (var user in @createModel.Users)
                {
                    <option value="@user">@user</option>
                }
            </InputSelect>
        </InputComponent>
    </InputRow>
    <InputRow>
        <InputComponent Title="Amount">
            <InputNumber name="Amount" class="form-control" @bind-Value="createModel.Amount" />
        </InputComponent>
    </InputRow>
    <SubmitButton Title="Create transaction" />
</EditForm>

@code {
    private CreateTransactionModel createModel = new CreateTransactionModel();
    private EditContext? editContext;
    private ValidationMessageStore? messageStore;
    private string userName;

    [Parameter]
    public int Id { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var state = await _authenticationStateProvider.GetAuthenticationStateAsync();
        userName = state.User.Identity.Name;
        createModel.Users = new List<string>();
        createModel.Users.Add("");
        createModel.Users.AddRange(_accountService.GetOtherUsersNames(userName));

        editContext = new(createModel);
        messageStore = new(editContext);
    }

    protected override void OnParametersSet()
    {
        if (Id == 0)
        {
            return;
        }

        var transaction = _transactionService.GetTransaction(Id);
        createModel.Amount = transaction.Amount;
        createModel.RecipientName = transaction.Correspondent.UserName;
    }

    private async void ValidSubmit()
    {
        messageStore.Clear();

        if (editContext == null || !editContext.Validate())
        {
            return;
        }

        if (createModel.Amount == 0)
        {
            messageStore.Add(() => createModel.Amount, "Amount should be greater than zero");
        }
        else
        {
            var result = _transferService.CreateTransaction(userName, createModel.RecipientName, createModel.Amount);
            if (result.Succeeded)
            {
                _navigation.NavigateTo("/", true);
            }
            else
            {
                foreach (var error in result.Errors)
                {
                    messageStore.Add(() => createModel.Amount, error.Description);
                }
            }
        }
        
        if (editContext.GetValidationMessages().Count() > 0)
        {
            editContext.NotifyValidationStateChanged();
        }
    }
}
