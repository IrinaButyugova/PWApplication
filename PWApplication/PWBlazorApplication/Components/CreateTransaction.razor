@page "/createTransaction"

@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Components.Forms;
@using PWBlazorApplication.Models;
@using PWApplication.BLL.Services;

@inject IAccountService _accountService;
@inject ITransactionService _transactionService;
@inject ITransferService _transferService;
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigation;

<EditForm class="container" EditContext="editContext" OnSubmit="ValidSubmit">
    <h2>Create Transaction</h2>
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3 row">
        <label for="RecipientName" class="col-sm-2 col-form-label">Recipient Name</label>
        <div class="col-sm-10">
            <InputSelect class="form-select" name="RecipientName" @bind-Value="createModel.RecipientName">
                @foreach (var user in @createModel.Users)
                {
                    <option value="@user">@user</option>
                }
            </InputSelect>
        </div>
        
    </div>
    <div class="mb-3 row">
        <label for="Amount" class="col-sm-2 col-form-label">Amount</label>
        <div class="col-sm-10">
            <InputNumber name="Amount" class="form-control" @bind-Value="createModel.Amount" />
        </div>
    </div>
    <div>
        <input type="submit" class="btn btn-primary" value="Create transaction" />
    </div>
</EditForm>

@code {
    private CreateTransactionModel createModel = new CreateTransactionModel();
    private EditContext? editContext;
    private ValidationMessageStore? messageStore;
    private string userName;

    [Parameter]
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var state = await _authenticationStateProvider.GetAuthenticationStateAsync();
        userName = state.User.Identity.Name;
        createModel.Users = _accountService.GetOtherUsersNames(userName);

        if(Id > 0)
        {
            var transaction = _transactionService.GetTransaction(Id);
            createModel.Amount = transaction.Amount;
            createModel.RecipientName = transaction.Correspondent.UserName;
        }

        editContext = new(createModel);
        messageStore = new(editContext);
    }

    private async void ValidSubmit()
    {
        messageStore.Clear();

        if (createModel.Amount == 0)
        {
            messageStore.Add(() => createModel.Amount, "Amount should be greater than zero");
        }
        else
        {
            var result = _transferService.CreateTransaction(userName, createModel.RecipientName, createModel.Amount);
            if (result.Succeeded)
            {
                _navigation.NavigateTo("/", true);
            }
            else
            {
                foreach (var error in result.Errors)
                {
                    messageStore.Add(() => createModel.Amount, error.Description);
                }
            }
        }
        
        if (editContext.GetValidationMessages().Count() > 0)
        {
            editContext.NotifyValidationStateChanged();
        }
    }
}
